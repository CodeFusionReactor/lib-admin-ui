plugins {
    id 'java'
    id 'maven'
    id 'com.enonic.defaults' version '1.0.3'
    id 'com.enonic.xp.base' version '1.0.15'
    id 'com.moowork.gulp' version '1.2.0'
}

repositories {
    jcenter()
    xp.enonicRepo()
}


group = 'com.enonic.lib'
version = '1.2.0-SNAPSHOT'

jar {
    baseName = 'lib-admin-ui'
}

node {
    download = true
    version = '6.9.2'
}

ext {
    resourcesDir = file( 'src/main/resources' )
}

loadConfiguration()


task lint( type: GulpTask, dependsOn: npmInstall ) {
    description = 'Lint the *.ts files.'
    args = ['lint']
    inputs.files fileTree( dir: 'src/main/resources', exclude: '**/_all.*' )
    outputs.files fileTree( dir: 'src/main/resources', include: '**/_all.*' )
    outputs.upToDateWhen { false }
}

task compile( type: GulpTask, dependsOn: lint ) {
    description = 'Build UI resources (css, etc).'
    args = ['all:no-lint']
    inputs.files fileTree( dir: 'src/main/resources', exclude: '**/_all.*' )
    outputs.files fileTree( dir: 'src/main/resources', include: '**/_all.*' )
}

task copyCompiled( type: Copy ) {
    description = 'Copy compiled JS and CSS files'
    from( 'src/main/resources/assets' ) {
        include '**/_all.js'
        include '**/_all.css'
        include '**/html-editor.css'
    }
    into 'build/resources/main/assets'
    includeEmptyDirs = false
}

task copyDTS( type: Copy ) {
    description = 'Copy Typescript definitions to /dev/d.ts folder.'
    from( 'src/main/resources/assets/admin/common/js' ) {
        include '**/*.d.ts'
        rename '_all.d.ts', 'admin.d.ts'
    }
    into 'build/resources/main/dev/d.ts'
    includeEmptyDirs = false
}

task copyStyles( type: Copy ) {
    description = 'Copy shared styles to /dev/styles folder.'
    def srcDir = 'src/main/resources/assets/admin/common/'
    from( "$srcDir/styles" ) {
        include '**/*.less'
        into 'styles'
    }
    from( "$srcDir/lib" ) {
        include '**/*.css'
        into 'lib'
    }
    from( "$srcDir/font" ) {
        into 'font'
    }
    from( "$srcDir/icons" ) {
        into 'icons'
    }
    includeEmptyDirs = false
    into 'build/resources/main/dev'
}

task copyAll {
    dependsOn 'compile'
    dependsOn 'copyCompiled'
    dependsOn 'copyDTS'
    dependsOn 'copyStyles'
    tasks.findByName('copyCompiled').mustRunAfter 'compile'
}

jar {
    exclude 'assets/spec/**'
    exclude 'assets/**/*.ts'   // let dev/**/admin.d.ts through to be used by other apps
    exclude 'assets/**/*.less' // let dev/**/*.less through to be used by other apps
    includeEmptyDirs = false
    dependsOn += copyAll
}

task npmInstallForce( type: NpmTask ) {
    description = 'Update all project node dependencies'
    args = ['install', '--force']
}

task cleanNode( type: Delete ) {
    delete += 'node_modules'
}

def loadConfiguration() {
    def envList = ['dev', 'prod']
    def environment = hasProperty( 'env' ) ? env : 'prod'

    if ( !envList.contains( environment ) ) {
        def message = "Target environment '$environment' is not allowed. Please use one of the following: ${envList.join(", ")}"
        throw new ResourceException( message )
    }

    def isDev = environment != 'prod'
    project.ext.isDev = isDev

    def envName = !isDev ? 'production' : 'development'
    println "Environment is set to $envName"
}
