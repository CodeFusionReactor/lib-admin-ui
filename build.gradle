plugins {
    id 'java'
    id 'maven'
    id 'com.enonic.defaults' version '1.0.3'
    id 'com.enonic.xp.base' version '1.0.15'
    id 'com.moowork.gulp' version '1.2.0'
}

repositories {
    jcenter()
    xp.enonicRepo()
}


group = 'com.enonic.lib'
version = '1.2.3-SNAPSHOT'

jar {
    baseName = 'lib-admin-ui'
}

node {
    download = true
    version = '6.9.2'
}

ext {
    resourcesDir = file( 'src/main/resources' )
}

task lint( type: GulpTask, dependsOn: npmInstall ) {
    description = 'Lint the *.ts files.'
    args = ['lint']
    inputs.files fileTree( dir: 'src/main/resources', exclude: '**/_all.*' )
    outputs.files fileTree( dir: 'src/main/resources', include: '**/_all.*' )
    outputs.upToDateWhen { false }
}

task gulpAll( type: GulpTask, dependsOn: lint ) {
    description = 'Build UI resources (css, etc).'
    args = ['all:no-lint']
    inputs.files fileTree( dir: 'src/main/resources', exclude: '**/_all.*' )
    outputs.files fileTree( dir: 'src/main/resources', include: '**/_all.*' )
}

task copyCompiled( type: Copy, dependsOn: gulpAll ) {
    description = 'Copy compiled js files.'
    from( 'src/main/resources/assets' ) {
        include '**/_all.js'
        include '**/_all.css'
        include '**/html-editor.css'
    }
    into 'build/resources/main/assets'
    includeEmptyDirs = false
}

task copyTypeDefs( type: Copy, dependsOn: copyCompiled ) {
    description = 'Copy Typescript definitions to /dev/d.ts folder.'
    from( 'src/main/resources/assets/admin/common/js' ) {
        include '**/*.d.ts'
        rename '_all.d.ts', 'admin.d.ts'
    }
    into 'build/resources/main/dev/d.ts'
    includeEmptyDirs = false
}

task copySharedStyles( type: Copy, dependsOn: copyTypeDefs ) {
    description = 'Copy shared styles to /dev/styles folder.'
    from( 'src/main/resources/assets/admin/common/styles' ) {
        include '**/*.less'
        into 'styles'
    }
    from( 'src/main/resources/assets/admin/common/lib' ) {
        include '**/*.css'
        into 'lib'
    }
    from( 'src/main/resources/assets/admin/common/images' ) {
        into 'images'
    }
    from( 'src/main/resources/assets/admin/common/font' ) {
        into 'font'
    }
    from( 'src/main/resources/assets/admin/common/icons' ) {
        into 'icons'
    }
    includeEmptyDirs = false
    into 'build/resources/main/dev'
}

jar {
    exclude 'assets/spec/**'
    exclude 'assets/**/*.ts'    // let dev/**/admin.d.ts through to be used by other apps
    exclude 'assets/**/*.less'  // let dev/**/*.less through to be used by other apps
    includeEmptyDirs = false
    dependsOn += copySharedStyles
}

task cleanNode( type: Delete ) {
    delete += 'node_modules'
}

task buildNoLint() {
    dependsOn += build
}

gradle.taskGraph.whenReady { graph ->
    // Disable `lint` in `buildNoLint` task
    if (graph.hasTask(buildNoLint)) {
        lint.enabled = false
    }
}
